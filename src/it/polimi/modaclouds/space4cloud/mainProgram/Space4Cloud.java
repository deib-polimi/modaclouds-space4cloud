/*******************************************************************************
 * Copyright 2014 Giovanni Paolo Gibilisco
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package it.polimi.modaclouds.space4cloud.mainProgram;

import it.polimi.modaclouds.qos_models.schema.ResourceModelExtension;
import it.polimi.modaclouds.qos_models.schema.UsageModelExtensions;
import it.polimi.modaclouds.qos_models.util.XMLHelper;
import it.polimi.modaclouds.space4cloud.exceptions.InitalFolderCreationException;
import it.polimi.modaclouds.space4cloud.gui.AssesmentWindow;
import it.polimi.modaclouds.space4cloud.gui.Choose;
import it.polimi.modaclouds.space4cloud.gui.LoadModel;
import it.polimi.modaclouds.space4cloud.gui.OptimizationProgressWindow;
import it.polimi.modaclouds.space4cloud.gui.XMLFileSelection;
import it.polimi.modaclouds.space4cloud.optimization.OptEngine;
import it.polimi.modaclouds.space4cloud.optimization.PartialEvaluationOptimizationEngine;
import it.polimi.modaclouds.space4cloud.optimization.constraints.ConstraintHandler;
import it.polimi.modaclouds.space4cloud.utils.ConfigurationHandler;
import it.polimi.modaclouds.space4cloud.utils.Constants;
import it.polimi.modaclouds.space4cloud.utils.LoggerHelper;
import it.polimi.modaclouds.space4cloud.utils.RunConfigurationsHandler;
import it.polimi.modaclouds.space4cloud.utils.SimpleEvaluator;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.ExecutionException;

import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.ParserConfigurationException;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.slf4j.Logger;
import org.xml.sax.SAXException;

import de.uka.ipd.sdq.pcmsolver.runconfig.MessageStrings;

public class Space4Cloud extends SwingWorker<Object, Object> {

	private static OptimizationProgressWindow progressWindow;
	private static AssesmentWindow assesmentWindow;
	private Constants c;
	private static Logger logger;

	@Override
	protected Object doInBackground() throws CoreException,
			ParserConfigurationException, SAXException, IOException {

		/* Ask for the functionality */
		Choose assesmentChoiche = new Choose("Functionality selection",
				"Choose the desired functionality", "Assesment",
				"Optimization", false);
		if (!assesmentChoiche.isChosen())
			return null;

		/* Load the resourceEnvironment */
		LoadModel lm = new LoadModel(null, "Resource Model",
				".resourceenvironment");
		if (!lm.isChosen())
			return null;
		File resourceEnvironmentFile = lm.getModelFile();

		/* Initialize constants */
		String modelsDirectory = resourceEnvironmentFile.getAbsolutePath();
		modelsDirectory = modelsDirectory.substring(0,
				modelsDirectory.lastIndexOf(File.separator));
		Constants.clear();
		Constants.setWorkingDirectory(modelsDirectory);
		c = Constants.getInstance();
		c.RESOURCE_MODEL = resourceEnvironmentFile.getAbsolutePath();
		logger = LoggerHelper.getLogger(Space4Cloud.class);

		/*
		 * Look for the config files generated by previous runs that stores
		 * other models
		 */
		Path confFilePath = Paths.get(c.ABSOLUTE_WORKING_DIRECTORY
				+ c.CONFIG_FILE_NAME);
		ConfigurationHandler confHandler = new ConfigurationHandler(
				confFilePath);

		// if there exists a configuration file
		if (confFilePath.toFile().exists()) {

			// clean all the files from previous run
			Path workingFolder = confFilePath.getParent();
			// get all the files and folders but the configuration file and log
			// files
			File[] filesToRemove = workingFolder.toFile().listFiles(
					new FilenameFilter() {
						@Override
						public boolean accept(File dir, String name) {
							return !(name.equals(c.CONFIG_FILE_NAME) || name
									.contains(".log"));
						}
					});

			for (File file : filesToRemove)
				if (file.isDirectory()) {
					ConfigurationHandler.cleanFolders(file.getAbsolutePath());
				} else {
					file.delete();
				}

			refreshProject();
			// load the new configuration
			confHandler.loadConfiguration();
		} else // if there is no configuration file then generate a valid
				// configuration
		{
			// delete any old space4cloud folder
			ConfigurationHandler.cleanFolders(c.ABSOLUTE_WORKING_DIRECTORY);

			// load the usage model
			lm = new LoadModel(null, "Usage Model", ".usagemodel");
			if (!lm.isChosen())
				return null;
			c.USAGE_MODEL = lm.getModelFile().getAbsolutePath();

			// load the allocation model
			lm = new LoadModel(null, "Allocation Model", ".allocation");
			if (!lm.isChosen())
				return null;
			c.ALLOCATION_MODEL = lm.getModelFile().getAbsolutePath();

			// load the repository model
			lm = new LoadModel(null, "Repository Model", ".repository");
			if (!lm.isChosen())
				return null;
			c.REPOSITORY_MODEL = lm.getModelFile().getAbsolutePath();

			// load the solver
			Choose choice = new Choose("Choose the Solver",
					"Which Solver do you want to use?");
			if (!choice.isChosen())
				return null;
			c.SOLVER = choice.getSolver();
			// if the solver is LINE it needs the path to its configuration file
			if (c.SOLVER.equals(MessageStrings.PERFENGINE_SOLVER)) {
				lm = new LoadModel(null, "Performance Engine Config",
						".properties");
				if (!lm.isChosen())
					return null;
				c.LINE_PROPERTIES_FILE = lm.getModelFile().getAbsolutePath();
			}

			// save the configuration, it will be run later in the optimization
			// process
			confHandler.saveConfiguration();
			// refresh the project in the workspace
			refreshProject();

		}

		// Build the run configuration
		RunConfigurationsHandler runConfigHandler = new RunConfigurationsHandler();
		// launch it
		runConfigHandler.launch();

		// Build the folder structure to host results and copy the LQN model in
		// those folders
		File resultDirPath = Paths.get(c.ABSOLUTE_WORKING_DIRECTORY,
				c.PERFORMANCE_RESULTS_FOLDER).toFile();
		// list files excluding the result file generated by the solver
		File[] modelFiles = resultDirPath.listFiles(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith(".xml") && !name.contains("_res");
			}
		});
		File[] resultFiles = resultDirPath.listFiles(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith("_res.xml") || name.endsWith(".lqxo");
			}
		});

		// if the palladio run has not produced a lqn model exit
		if (modelFiles.length != 1 || resultFiles.length != 1) {
			logger.error("The first initialization run has encounter some problem during the generation of the first solution");
			logger.error("SPACE4CLOUD will now exit.");
			return null;
		}

		// there should be just 1 palladio model
		Path lqnModelPath = modelFiles[0].toPath();
		// with the corresponding evaluation
		Path resultModelPath = resultFiles[0].toPath();

		// build the folder structure
		try {
			buildFolderStructure(lqnModelPath, resultModelPath);
		} catch (IOException e) {
			throw new InitalFolderCreationException(e);
		}
		// refresh the workspace
		refreshProject();

		File usageModelExtFile = null;
		XMLFileSelection usageModelExtSelector = new XMLFileSelection(
				"Load Usage Model Extension");
		// keep asking the file until a valid file is provided or the user
		// pressed cancel
		do {
			usageModelExtSelector.askFile();
			usageModelExtFile = usageModelExtSelector.getFile();
			try {
				if (usageModelExtFile != null)
					XMLHelper.deserialize(usageModelExtFile.toURI().toURL(),
							UsageModelExtensions.class);
			} catch (JAXBException e) {
				logger.warn("The usage Model extension file specified ("
						+ usageModelExtFile + ") is not valid ", e);
				usageModelExtFile = null;
			}
		} while (!usageModelExtSelector.isCanceled()
				&& usageModelExtFile == null);
		if (usageModelExtSelector.isCanceled()) {
			logger.info("No usage model extension selected. Quitting SPACE4CLOUD");
			return null;
		}
		c.RESOURCE_ENV_EXT_FILE = usageModelExtFile.getAbsolutePath();

		/*
		 * Here I (Riccardo B. Desantis) am implementing the generation of the
		 * first solution using cplex and the tool made by Alexander Lavrentev.
		 */

		/* Ask if you want to produce the "intelligent" first solution */
		Object[] options = { "Yes", "No" };
		int n = JOptionPane
				.showOptionDialog(
						null,
						"Do you want to generate a first optimal solution? (It might take some time)",
						"First solution", JOptionPane.YES_NO_CANCEL_OPTION,
						JOptionPane.PLAIN_MESSAGE, null, options, options[1]);

		logger.debug("Initial Solution generation: " + n);

		File resourceEnvExtFile = null;
		if (n == 1) {
			XMLFileSelection extensionSelector = new XMLFileSelection(
					"Load Resource Environment Extension");
			// keep asking the file until a valid file is provided or the user
			// pressed cancel
			do {
				extensionSelector.askFile();
				resourceEnvExtFile = extensionSelector.getFile();
				try {
					if (resourceEnvExtFile != null)
						XMLHelper.deserialize(resourceEnvExtFile.toURI()
								.toURL(), ResourceModelExtension.class);
				} catch (JAXBException e) {
					logger.error(
							"The resource Model extension file specified ("
									+ resourceEnvExtFile + ") is not valid ", e);
					resourceEnvExtFile = null;
				}
			} while (!extensionSelector.isCanceled()
					&& resourceEnvExtFile == null);
			if (extensionSelector.isCanceled()) {
				logger.warn("No resource model extension selected. Quitting SPACE4CLOUD");
				return null;
			}
			c.RESOURCE_ENV_EXT_FILE = resourceEnvExtFile.getAbsolutePath();
		} else {
			logger.info("Solution generation not supported yet");
			return null;
			// resourceEnvExtFile = informationparser.MainTest.generateSolution(
			// c.ABSOLUTE_WORKING_DIRECTORY, c.RESOURCE_MODEL, c.USAGE_MODEL,
			// c.ALLOCATION_MODEL, c.REPOSITORY_MODEL);
			// c.RESOURCE_ENV_EXT_FILE = resourceEnvExtFile.getAbsolutePath();
		}

		/*
		 * Load the Extension file XMLFileSelection extensionSelector = new
		 * XMLFileSelection("Load Extension"); File extensionFile =
		 * extensionSelector.getFile(); if(extensionFile == null) return null;
		 * c.EXTENSION_FILE = extensionFile.getAbsolutePath();
		 */

		if (!assesmentChoiche.isTrue()) {

			/* Load the Constraint file */
			logger.info("Parsing Constraints");
			XMLFileSelection constraintSelector = new XMLFileSelection(
					"Load Constraints");
			constraintSelector.askFile();
			File constraintFile = constraintSelector.getFile();
			if (constraintFile == null)
				return null;

			// Parse the constraints and initialize the handler
			ConstraintHandler constraintHandler = new ConstraintHandler();
			constraintHandler.loadConstraints(constraintFile);

			// Build a new Optimization Engine engine and an empty initial
			// solution
			logger.info("Loading the optimization enging and perparing the solver");

			OptEngine engine = new PartialEvaluationOptimizationEngine(
					constraintHandler);

			// load the initial solution from the PCM specified in the
			// configuration and the extension
			logger.info("Parsing The Solution");
			try {
				engine.loadInitialSolution(resourceEnvExtFile,
						usageModelExtFile);
			} catch (JAXBException e) {
				logger.error("Error in loading the initial solution", e);
			}

			// create the progress window
			progressWindow = new OptimizationProgressWindow();
			progressWindow.setMax(engine.getMaxIterations());
			progressWindow.setCostLogger(engine.getCostLogger());
			progressWindow.setVMLogger(engine.getVMLogger());
			progressWindow.setConstraintsLogger(engine.getConstraintsLogger());
			engine.addPropertyChangeListener(progressWindow);
			engine.getEvalProxy().addPropertyChangeListener(progressWindow);

			// start the optimization
			logger.info("Starting the optimization");
			engine.execute();

		}
		// otherwise just evaluate the extended solution
		// TODO: fix this, it is based on old implementation
		else {
			confHandler.removeOldLQNFiles();
			SimpleEvaluator evaluator = new SimpleEvaluator();
			evaluator.eval();
			evaluator.parseResults();
			assesmentWindow = new AssesmentWindow();
			assesmentWindow.setVMLogger(evaluator.getVMLogger());
			assesmentWindow.setResponseTimeLogger(evaluator.getRTLogger());
			assesmentWindow.setUtilizationLogger(evaluator.getUtilLogger());
			assesmentWindow.show();
			assesmentWindow.updateImages();

		}
		return null;
	}

	private void buildFolderStructure(Path lqnModelPath, Path resultModelPath)
			throws IOException {
		for (int i = 0; i < 24; i++) {
			Path tmpFolderPath = Paths.get(c.ABSOLUTE_WORKING_DIRECTORY,
					c.PERFORMANCE_RESULTS_FOLDER, c.FOLDER_PREFIX + i);
			Files.createDirectory(tmpFolderPath);
			Path tmpLqnPath = Paths.get(c.ABSOLUTE_WORKING_DIRECTORY,
					c.PERFORMANCE_RESULTS_FOLDER, c.FOLDER_PREFIX + i,
					lqnModelPath.getFileName().toString());
			Files.copy(lqnModelPath, tmpLqnPath);
			Path tmpResultPath = Paths.get(c.ABSOLUTE_WORKING_DIRECTORY,
					c.PERFORMANCE_RESULTS_FOLDER, c.FOLDER_PREFIX + i,
					resultModelPath.getFileName().toString());
			Files.copy(resultModelPath, tmpResultPath);
		}
	}

	private void refreshProject() throws CoreException {
		ResourcesPlugin
				.getWorkspace()
				.getRoot()
				.getProject(c.PROJECT_NAME)
				.refreshLocal(IResource.DEPTH_INFINITE,
						new NullProgressMonitor());

	}

	protected void done() {
		try {
			get();
		} catch (ExecutionException e) {
			logger.error("Execution error while running space4cloud ", e);
		} catch (InterruptedException e) {
			logger.error("Interrupted execution of space4cloud ", e);
		}
	}

}
